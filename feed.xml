<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://fgroove.github.io/longan/</id><title>Mista's Blog</title><subtitle>Android, Audio framework, build, AudioPolicy, AudioManger.</subtitle> <updated>2023-04-13T23:14:01+08:00</updated> <author> <name>CC</name> <uri>https://fgroove.github.io/longan/</uri> </author><link rel="self" type="application/atom+xml" href="https://fgroove.github.io/longan/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://fgroove.github.io/longan/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 CC </rights> <icon>/longan/assets/img/favicons/favicon.ico</icon> <logo>/longan/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Android.bp syntax and usecase</title><link href="https://fgroove.github.io/longan/posts/Android.bp-syntax/" rel="alternate" type="text/html" title="Android.bp syntax and usecase" /><published>2022-07-20T23:55:00+08:00</published> <updated>2022-09-19T10:43:54+08:00</updated> <id>https://fgroove.github.io/longan/posts/Android.bp-syntax/</id> <content src="https://fgroove.github.io/longan/posts/Android.bp-syntax/" /> <author> <name>CC</name> </author> <category term="Android" /> <category term="build" /> <summary> 在实际开发过程中，经常会遇到通过 宏/环境变量 判断是否加载某个模块，这时就需要进行条件编译。 Android 7.0 前使用 Android.mk 来编译模块，makefile 支持条件编译；但是 Android 7.0 之后逐步被 Android.bp 取代，Android.bp 本质上是 json 配置文件，不支持条件判断，所以 Google 提供了通过 go 语言来实现 Android.bp 的条件编译。 相关的的官方描述：Soong 编译系统 Android.bp语法 模块 Module Desc cc_defaults 父模块，可以通过 defaults 属性被其它模块继承 cc_library 编译成库文件 ... </summary> </entry> <entry><title>audio performance - binder</title><link href="https://fgroove.github.io/longan/posts/Audio-Performance-binder/" rel="alternate" type="text/html" title="audio performance - binder" /><published>2022-07-20T22:50:00+08:00</published> <updated>2022-07-20T22:50:00+08:00</updated> <id>https://fgroove.github.io/longan/posts/Audio-Performance-binder/</id> <content src="https://fgroove.github.io/longan/posts/Audio-Performance-binder/" /> <author> <name>CC</name> </author> <category term="audio" /> <category term="performance" /> <summary> Binder </summary> </entry> <entry><title>native crash - audioserver crash</title><link href="https://fgroove.github.io/longan/posts/Audio-Stability/" rel="alternate" type="text/html" title="native crash - audioserver crash" /><published>2022-07-20T21:50:00+08:00</published> <updated>2022-07-20T21:50:00+08:00</updated> <id>https://fgroove.github.io/longan/posts/Audio-Stability/</id> <content src="https://fgroove.github.io/longan/posts/Audio-Stability/" /> <author> <name>CC</name> </author> <category term="audio" /> <category term="stability" /> <summary> Audioserver crash </summary> </entry> <entry><title>audio performance - systrace</title><link href="https://fgroove.github.io/longan/posts/Audio-Performance-systrace/" rel="alternate" type="text/html" title="audio performance - systrace" /><published>2022-07-20T21:50:00+08:00</published> <updated>2022-07-24T22:57:07+08:00</updated> <id>https://fgroove.github.io/longan/posts/Audio-Performance-systrace/</id> <content src="https://fgroove.github.io/longan/posts/Audio-Performance-systrace/" /> <author> <name>CC</name> </author> <category term="audio" /> <category term="performance" /> <summary> Systrace </summary> </entry> <entry><title>Android HAL 与 HIDL 开发实例</title><link href="https://fgroove.github.io/longan/posts/Android-HIDL-Example/" rel="alternate" type="text/html" title="Android HAL 与 HIDL 开发实例" /><published>2022-07-14T00:55:00+08:00</published> <updated>2022-09-19T10:43:54+08:00</updated> <id>https://fgroove.github.io/longan/posts/Android-HIDL-Example/</id> <content src="https://fgroove.github.io/longan/posts/Android-HIDL-Example/" /> <author> <name>CC</name> </author> <category term="Android" /> <category term="build" /> <summary> Android 8.0之后，/dev/binder拓展多出了两个域，即/dev/hwbinder和/dev/vndbinder， /dev/hwbinder 主要用于 HIDL 接口的通信， /dev/vndbinder 则是用于 vendor 进程之间的 AIDL 通信。 作为 OEM/ODM 厂商，需要了解 Android 硬件的开发和集成流程，把自己硬件添加到 ROM 中，比如集成杜比音效。 关于 ROM：国内的定制系统开发者，经常会陷入自己的产品究竟是应该称为 OS (ColorOS) 还是 UI (MIUI) 的争论，为了避免此类争论和表示谦虚，会自称为 ROM。应该就是 Android /system分区。 HAL 硬件抽象层 HAL，Hardware Abstraction Layer，即硬件抽象层。 从碎片化角度看，系统设计者希望底层硬... </summary> </entry> </feed>
